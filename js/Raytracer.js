/*
 MIT
 MIT
 MIT
 MIT
 MIT
 MIT
 MIT
 MIT
 MIT
 MIT
*/
var $jscomp={scope:{},global:this,initSymbolIterator(){Symbol=$jscomp.global.Symbol||{};Symbol.iterator||(Symbol.iterator="$jscomp$iterator");$jscomp.initSymbolIterator=()=>{}},makeIterator(a){$jscomp.initSymbolIterator();if(a[Symbol.iterator])return a[Symbol.iterator]();if(!(a instanceof Array)&&"string"!=typeof a)throw Error();var b=0;return{next(){return b==a.length?{done:!0}:{done:!1,value:a[b++]}}}},inherits(a,b){function d(){}d.prototype=b.prototype;a.prototype=new d;a.prototype.constructor=
a;for(var c in b)if($jscomp.global.Object.defineProperties){var e=$jscomp.global.Object.getOwnPropertyDescriptor(b,c);void 0!==e&&$jscomp.global.Object.defineProperty(a,c,e)}else a[c]=b[c]}};function Math3D(){}Math3D.transformPipe=(a)=>{for(var b=Matrices3D.I,d=0;d<a.length;d++)b=Math3D.multiplyMatrices(b,a[d]);return b};
Math3D.scale=(a,b,d)=>{var c=Math3D.initMatrix(4,4);c[0][0]=a;c[0][1]=0;c[0][2]=0;c[0][3]=0;c[1][0]=0;c[1][1]=b;c[1][2]=0;c[1][3]=0;c[2][0]=0;c[2][1]=0;c[2][2]=d;c[2][3]=0;c[3][0]=0;c[3][1]=0;c[3][2]=0;c[3][3]=1;return c};Math3D.translate=(a,b,d)=>{var c=Math3D.initMatrix(4,4);c[0][0]=1;c[0][1]=0;c[0][2]=0;c[0][3]=a;c[1][0]=0;c[1][1]=1;c[1][2]=0;c[1][3]=b;c[2][0]=0;c[2][1]=0;c[2][2]=1;c[2][3]=d;c[3][0]=0;c[3][1]=0;c[3][2]=0;c[3][3]=1;return c};
Math3D.rotateOnArbitrary=(a,b)=>{var d=Math.cos(Math.PI/180*a),c=Math.sin(Math.PI/180*a),e=Math3D.normalizeVector(b),f=Math3D.initMatrix(4,4);f[0][0]=0;f[0][1]=-e.z();f[0][2]=e.y();f[0][3]=0;f[1][0]=e.z();f[1][1]=0;f[1][2]=-e.x();f[1][3]=0;f[2][0]=-e.y();f[2][1]=e.x();f[2][2]=0;f[2][3]=0;f[3][0]=0;f[3][1]=0;f[3][2]=0;f[3][3]=1;return Math3D.addMatrix(Matrices3D.I,MatrixMath3D.addMatrix(Math3D.scalarMultiplyMatrix(f,c)),Math3D.scalarMultiplyMatrix(Math3D.multiplyMatrices(f,f),1-d))};
Math3D.vectorizePoints=(a,b)=>{var d=Math3D.subtractPoints(a,b);d.h=0;return d};Math3D.crossProduct=(a,b)=>{x:a.y*b.z-a.z*b.y,y:a.z*b.x-a.x*b.z,z:a.x*b.y-a.y*b.x,h:0};Math3D.dotProduct=(a,b)=>a.x*b.x+a.y*b.y+a.z*b.z+a.h*b.h;Math3D.scalarMultiply=(a,b)=>{x:a.x*b,y:a.y*b,z:a.z*b,h:a.h*b};Math3D.magnitudeOfVector=(a)=>Math.sqrt(a.x*a.x+a.y*a.y+a.z*a.z+a.h*a.h);Math3D.addPoints=(a,b)=>{x:a.x+b.x,y:a.y+b.y,z:a.z+b.z,h:a.h+b.h};Math3D.addVectors=(a,b)=>Math3D.addPoints(a,b);
Math3D.subtractPoints=(a,b)=>{x:a.x-b.x,y:a.y-b.y,z:a.z-b.z,h:1};Math3D.normalizeVector=(a)=>{var b={},b=Math3D.magnitudeOfVector(a);return b=Math3D.scalarMultiply(a,1/b)};Math3D.initMatrix=(a,b)=>{var d=[];if(a&&b)for(var c=0;c<a;c++){for(var e=[],f=0;f<b;f++)e.push(0);d.push(e)}else for(c=0;4>c;c++)d.push([0,0,0,0]);return d};Math3D.addMatrix=function(a,b){for(var d=this.initMatrix(),c=0;4>c;c++)for(var e=0;4>e;e++)d[c][e]=a[c][e]+b[c][e];return d};
Math3D.scalarMultiplyMatrix=function(a,b){for(var d=this.initMatrix(),c=0;4>c;c++)for(var e=0;4>e;e++)d[c][e]=a[c][e]*b;return d};Math3D.multiplyMatrices=function(a,b){for(var d=this.initMatrix(),c=0;4>c;c++)for(var e=0;4>e;e++){for(var f=0,g=0;4>g;g++)f+=a[c][g]*b[g][e];d[c][e]=f}return d};
Math3D.multiplyVectorByMatrix=(a,b)=>{x:b.x*a[0][0]+b.y*a[0][1]+b.z*a[0][2]+b.h*a[0][3],y:b.x*a[1][0]+b.y*a[1][1]+b.z*a[1][2]+b.h*a[1][3],z:b.x*a[2][0]+b.y*a[2][1]+b.z*a[2][2]+b.h*a[2][3],h:b.x*a[3][0]+b.y*a[3][1]+b.z*a[3][2]+b.h*a[3][3]};Math3D.matrixCofactor=function(a,b,d){for(var c=this.initMatrix(a.length-1,a.length-1),e=0,f=0,g=0;g<c.length&&e<a.length;g++){g==b&&(e=g+1);for(var h=0;h<c.length&&f<a.length;h++)h==d&&(f=h+1),c[g][h]=a[e][f],f++;f=0;e++}return c};
Math3D.matrixDeterminate=function(a){if(2==a.length)return a[0][0]*a[1][1]-a[0][1]*a[1][0];for(var b=0,d=0;d<a.length;d++)var c=Math.floor(Math.pow(-1,d)),b=b+c*a[0][d]*this.matrixDeterminate(this.matrixCofactor(a,0,d));return b};Math3D.matrixPTranspose=function(a){for(var b=this.initMatrix(a[0].length,a.length),d=0;d<a.length;d++)for(var c=0;c<a[0].length;c++)b[c][d]=a[d][c];return b};
Math3D.matrixAdjugate=function(a){if(3>a.length)return null;for(var b=this.initMatrix(a.length,a.length),d=0;d<a.length;d++)for(var c=0;c<a.length;c++){var e=Math.floor(Math.pow(-1,d+c));b[d][c]=e*this.matrixDeterminate(this.matrixCofactor(a,d,c))}return this.matrixPTranspose(b)};Math3D.matrixInverse=function(a){var b=this.matrixDeterminate(a);a=this.matrixAdjugate(a);return this.scalarMultiplyMatrix(a,1/b)};
var Matrices3D={I:[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],testA:[[2,3,1,5],[1,0,3,1],[0,2,-3,2],[0,2,3,1]],testAV:[[18,-35,-28,1],[9,-18,-14,1],[-2,4,3,0],[-12,24,19,-1]]};function matrixInversionTest(){var a=Matrices3D.testA;console.log(matrixToString(a));for(var a=Math3D.matrixInverse(a),b=!0,d=0;4>d;d++)for(var c=0;4>c;c++)a[d][c]!=Matrices3D.testAV[d][c]&&(b=!1);console.log(b,"\n",matrixToString(a))}
function matrixToString(a){for(var b="",d=0;d<a.length;d++){for(var c=0;c<a[0].length;c++)b+=a[d][c]+" ";b+="\n"}return b}
var Canvas2D=function(){this.container=document.createElement("div");this.canvas=document.createElement("canvas");this.canvas.style.border="1px solid black";this.canvas.style.width="100%";this.canvas.style.height="100%";this.canvas.style.position="absolute";this.container.style.margin="5%";this.container.style.width="90%";this.container.style.height=.8*window.innerHeight+"px";this.container.style.position="relative";this.context=this.canvas.getContext("2d");this.container.appendChild(this.canvas);
document.body.appendChild(this.container);this.rect=this.canvas.getBoundingClientRect();$(window).on("resize",function(a){this.rect=this.canvas.getBoundingClientRect();this.canvas.width=this.rect.width;this.canvas.height=this.rect.height;this.width=this.rect.width;this.height=this.rect.height;this.buffer=this.context.createImageData(this.width,this.height)}.bind(this));this.canvas.width=this.rect.width;this.canvas.height=this.rect.height;this.width=this.rect.width;this.height=this.rect.height;this.pixelImageData=
this.context.createImageData(1,1);this.buffer=this.context.createImageData(this.width,this.height)};Canvas2D.prototype.drawPixel=function(a){this.pixelImageData.data[0]=a.r;this.pixelImageData.data[1]=a.g;this.pixelImageData.data[2]=a.b;this.pixelImageData.data[3]=a.a;this.context.putImageData(this.pixelImageData,a.x,a.y)};
Canvas2D.prototype.drawPixelToBuffer=function(a){var b=4*(a.x+a.y*this.width)-4;this.buffer.data[b]=a.r;this.buffer.data[b+1]=a.g;this.buffer.data[b+2]=a.b;this.buffer.data[b+3]=a.a};Canvas2D.prototype.flushBuffer=function(){this.context.putImageData(this.buffer,0,0)};Canvas2D.prototype.clearBuffer=function(){this.buffer=this.context.createImageData(this.width,this.height)};
Canvas2D.prototype.drawLine=function(a){this.context.beginPath();this.context.moveTo(a.x1,a.y1);this.context.lineTo(a.x2,a.y2);this.context.stroke()};
var Camera=function(a){this.e={x:0,y:0,z:0,h:1};this.u={};this.v={};this.n={};this.N=.5;this.F=100;this.M={};this.S1T1Mp={};this.WS2T2={};this.world={};this.e=a.position;this.g=a.gaze;this.width=a.width;this.height=a.height;this.setupVectors=function(){this.x=this.width;this.y=this.height;this.aspect=this.width/this.height;this.theta=a.viewingAngle;this.world=a.world;var b=Math3D.vectorizePoints(this.g,this.e),d=1/Math3D.magnitudeOfVector(b);this.n=Math3D.scalarMultiply(b,d);this.u=Math3D.crossProduct({x:0,
y:1,z:0,h:0},this.n);this.u=Math3D.scalarMultiply(this.u,-1);this.v=Math3D.crossProduct(this.n,this.u);this.t=this.N*Math.tan(Math.PI/180*(this.theta/2));this.b=-this.t;this.r=this.aspect*this.t;this.l=-this.r;this.updateMatrixPipe()}.bind(this);this.setupVectors();this.debug=!1;a.noPipe&&(this.noPipe=!0)};Camera.prototype.moveU=function(a){a=Math3D.scalarMultiply(this.u,a);this.e=Math3D.addPoints(a,this.e);this.updateMatrixPipe()};
Camera.prototype.moveV=function(a){a=Math3D.scalarMultiply(this.v,a);this.e=Math3D.addPoints(a,this.e);this.updateMatrixPipe()};Camera.prototype.moveN=function(a){a=Math3D.scalarMultiply(this.n,a);this.e=Math3D.addPoints(a,this.e);this.updateMatrixPipe()};Camera.prototype.rotateU=function(a){a=Math3D.rotateOnArbitrary(a,this.u);this.v=multiplyMatrixWithVector(a,this.v);this.n=multiplyMatrixWithVector(a,this.n)};
Camera.prototype.rotateV=function(a){a=Math3D.rotateOnArbitrary(a,this.v);this.u=multiplyMatrixWithVector(a,this.u);this.n=multiplyMatrixWithVector(a,this.n)};Camera.prototype.rotateN=function(a){a=Math3D.rotateOnArbitrary(a,this.n);this.u=multiplyMatrixWithVector(a,this.u);this.v=multiplyMatrixWithVector(a,this.v)};
Camera.prototype.updateMatrixPipe=function(){if(!this.noPipe){this.WS2T2=this.computeWS2T2();this.debug&&console.log(matrixToString(this.WS2T2));this.S1T1Mp=this.computeS1T1Mp();this.debug&&console.log(matrixToString(this.S1T1Mp));this.Mv=this.computeMv();this.debug&&console.log(matrixToString(this.Mv));var a=Math3D.multiplyMatrices(this.WS2T2,this.S1T1Mp);this.debug&&console.log(matrixToString(a));this.matrixPipe=Math3D.multiplyMatrices(a,this.Mv);this.debug&&console.log(matrixToString(this.matrixPipe))}};
Camera.prototype.computeWS2T2=function(){var a=Math3D.initMatrix(),b=this.width,d=this.height;a[0][0]=b/2;a[0][1]=0;a[0][2]=0;a[0][3]=b/2;a[1][0]=0;a[1][1]=-d/2;a[1][2]=0;a[1][3]=-d/2+d;a[2][0]=0;a[2][1]=0;a[2][2]=1;a[2][3]=0;a[3][0]=0;a[3][1]=0;a[3][2]=0;a[3][3]=1;return a};
Camera.prototype.computeS1T1Mp=function(){var a=Math3D.initMatrix(),b=this.t,d=this.b,c=this.r,e=this.l,f=this.N,g=this.F;a[0][0]=2*f/(c-1);a[0][1]=0;a[0][2]=(c+e)/(c-e);a[0][3]=0;a[1][0]=0;a[1][1]=2*f/(b-d);a[1][2]=(b+d)/(b-d);a[1][3]=0;a[2][0]=0;a[2][1]=0;a[2][2]=-(g+f)/(g-f);a[2][3]=-2*g*f/(g-f);a[3][0]=0;a[3][1]=0;a[3][2]=-1;a[3][3]=0;return a};
Camera.prototype.computeMv=function(){var a=Math3D.initMatrix(),b=this.u,d=this.v,c=this.n,e=this.e;a[0][0]=b.x;a[0][1]=b.y;a[0][2]=b.z;a[0][3]=-Math3D.dotProduct(e,b);a[1][0]=d.x;a[1][1]=d.y;a[1][2]=d.z;a[1][3]=-Math3D.dotProduct(e,d);a[2][0]=c.x;a[2][1]=c.y;a[2][2]=c.z;a[2][3]=-Math3D.dotProduct(e,c);a[3][0]=0;a[3][1]=0;a[3][2]=0;a[3][3]=1;return a};
var GenericObject=function(a){if(a)for(var b in a)this[b]=a[b];this.baseC||(this.baseC={r:255,g:255,b:255,a:255});this.ambientC||(this.ambientC=this.baseC);this.diffuseC||(this.diffuseC=this.baseC);this.specularC||(this.specularC=this.baseC);this.ambientFactor||(this.ambientFactor=0);this.diffuseFactor||(this.diffuseFactor=.2);this.specularFactor||(this.specularFactor=.9);this.reflectionFactor||(this.reflectionFactor=.9);this.refractionFactor||(this.refractionFactor=0);this.specularFalloff||(this.specularFalloff=
40);this.refractionIndex||(this.refractionIndex=1);this.opacity||(this.opacity=1);this.transformInverse=this.transform?Math3D.matrixInverse(this.transform):this.transform=Matrices3D.I;this.UVMap||(this.UVMap=null)};GenericObject.prototype.setTransform=function(a){this.transform=a;this.transformInverse=Math3D.matrixInverse(this.transform)};GenericObject.prototype.rayIntersect=(a)=>{};GenericObject.prototype.getNormalAt=(a)=>{};GenericObject.prototype.getUVMapAt=(a)=>{};
var Light=function(a){this.color=a.color?a.color:{r:255,g:255,b:255,a:255};a.intensity?this.intensity=a.intensity:this.inensity=1},Ray=function(a){if(a.camera){this.x=a.x;this.y=a.y;this.camera=a.camera;this.superSampleRate=a.superSampleRate?a.superSampleRate:1;this.e=a.camera.e;this.u=a.camera.u;this.v=a.camera.v;this.n=a.camera.n;this.N=a.camera.N;this.W=a.camera.r;this.H=a.camera.t;var b=Math3D.scalarMultiply(this.n,-this.N);this.a=b;var d=this.W*(2*this.x/(this.camera.width*this.superSampleRate)-
1);this.bcoeff=d;this.b=d=Math3D.scalarMultiply(this.u,d);var c=this.H*(2*this.y/(this.camera.height*this.superSampleRate)-1);this.ccoeff=c;this.c=c=Math3D.scalarMultiply(this.v,c);this.d=Math3D.addVectors(Math3D.addVectors(b,d),c)}else if(a.objectPoint&&a.targetPoint)this.e=objectPoint,this.d=Math3D.vectorizePoints(objectPoint,targetPoint),this.d=Math3D.scalarMultiply(this.d,1/Math3D.magnitudeOfVector(this.d));else if(a.e&&a.d)this.e=a.e,this.d=a.d;else throw"Error not a valid Ray Constructor";this.depth=
a.depth;this.exclusionObj=a.exclusionObj?a.exclusionObj:{};this.lowestIntersectValue=0;this.lowestIntersectPoint=this.lowestIntersectObject=null;this.intersectedObjects=[];this.intersectedObject=!1};
Ray.prototype.addIntersect=function(a){if(a.obj!=this.exclusionObj&&0!=a.t)if(a.t&&a.obj){var b=Math3D.scalarMultiply(this.d,a.t),b=Math3D.addPoints(this.e,b);!this.intersectedObject&&0>a.t?(this.lowestIntersectValue=a.t,this.lowestIntersectObject=a.obj,this.lowestIntersectPoint=b,this.intersectedObjects.push(a.obj),this.intersectedObject=!0):a.t>this.lowestIntersectValue&&0>a.t&&(this.lowestIntersectValue=a.t,this.lowestIntersectObject=a.obj,this.lowestIntersectPoint=b)}else throw"Not a valid addIntersect";
};Ray.prototype.rayDetect=function(a){var b=0;0!=this.d.x?b=a.x-this.e.x/this.d.x:0!=this.d.y?b=a.y-this.e.y/this.d.y:0!=this.d.z&&(b=a.z-this.e.z/thid.d.z);return b};var Raytracer=function(a){var b=this;this.world=a.world;this.world.some((a)=>{a instanceof Camera&&(b.camera=a)});if(!this.camera)throw"World Does not have a Camera!";this.pixelRenderer=a.pixelRenderer;this.backgroundColor={r:0,g:0,b:0,a:255};this.color={r:100,g:100,b:100,a:255};this.falloffFactor=10;this.recursionFactor=4;this.drawTitle()};
Raytracer.prototype.drawTitle=function(){var a=this.pixelRenderer.height,b=this.pixelRenderer.context,d=this.pixelRenderer.width/2,c=2/3*a;b.font="30pt Helvetica,Arial,sans-serif";b.textAlign="center";b.fillStyle="Black";b.fillText("Raytracer-JS",d,1/3*a);b.font="15pt Helvetica,Arial,sans-serif";b.fillText("Version 0.0.1 By SparkX120",d,c)};
Raytracer.prototype.drawRenderingPlaceholder=function(){var a=this.pixelRenderer.width,b=this.pixelRenderer.height,d=this.pixelRenderer.context;d.fillStyle="rgba(255,255,255,1)";d.fillRect(0,0,a,b);this.progress=document.createElement("progress");this.progress.max=100;this.progress.value=0;this.progress.style.zindex="99";this.progress.style.width="100%";this.progress.style.height="3em";this.progress.style.bottom="50%";this.progress.style.position="absolute";this.progress.style.border="1px solid black";
this.progress.className="prog";this.pixelRenderer.container&&this.pixelRenderer.container.appendChild(this.progress)};Raytracer.prototype.getObjectList=function(){return this.world.filter((a)=>a instanceof GenericObject)};Raytracer.prototype.getLightList=function(){return this.world.filter((a)=>a instanceof Light)};
Raytracer.prototype.render=function(){var a=this;this.drawRenderingPlaceholder();setTimeout(()=>{a.pixelRenderer.clearBuffer();a.camera.width=a.pixelRenderer.width;a.camera.height=a.pixelRenderer.height;a.camera.setupVectors();var b=0,d=setInterval(()=>{if(b<a.camera.y){b++;for(var c=0;c<a.camera.x;c++){var e=new Ray({x:c,y:b,camera:a.camera,depth:0}),e=a.raytrace(e);e.x=c;e.y=b;a.pixelRenderer.drawPixel(e)}c=Math.floor(b/a.camera.y*100);a.progress&&a.progress.value!=c&&(a.progress.value=c)}else a.progress&&
(a.pixelRenderer.container.removeChild(a.progress),a.progress=null),clearTimeout(d)},1)},10)};
Raytracer.prototype.raytrace=function(a,b,d){if(b&&recusion>this.recursionFactor)return{r:0,g:0,b:0,a:0};var c=this.getObjectList();this.getLightList();c.map((b)=>{d?d!=b&&b.rayIntersect(a):b.rayIntersect(a)});if(a.intersectedObject){var e=a.lowestIntersectObject,c=e.ambientFactor,f=e.diffuseFactor,g=e.specularFactor,h=e.reflectionFactor,k=e.refractionFactor,l=e.ambientC,n={r:0,g:0,b:0,a:0},m={r:0,g:0,b:0,a:0},q={r:0,g:0,b:0,a:0},p={r:0,g:0,b:0,a:0};this.getLightList()&&(0<e.diffuseFactor&&(n=this._diffuseShader(a)),
0<e.specularFactor&&(m=this._specularShader(a)),0<e.reflectionFactor&&(q=this._reflectionShader(a)),0<e.refractionFactor&&(p=this._refractionShader(a,b)));b=l.g*c+n.g*f+m.g*g+q.g*h+p.g*k;var r=l.b*c+n.b*f+m.b*g+q.b*h+p.b*k,e=255*e.opacity;return{r:Math.min(l.r*c+n.r*f+m.r*g+q.r*h+p.r*k,255),g:Math.min(b,255),b:Math.min(r,255),a:Math.min(e,255)}}return{r:this.backgroundColor.r,g:this.backgroundColor.g,b:this.backgroundColor.b,a:this.backgroundColor.a}};
Raytracer.prototype._diffuseShader=function(a){var b=a.lowestIntersectObject,d=a.lowestIntersectPoint,c=b.getNormalAt(d),e=0;if(this.getLightList()){var f=this;this.getLightList().map((g,h,k)=>{k=Math3D.vectorizePoints(d,g.source);Math3D.vectorizePoints(d,a.e);h=Math3D.dotProduct(c,k);var l=new Ray({e:d,d:k,exclusionObj:b});f.getObjectList().map((a)=>{a.rayIntersect(l)});l.intersectedObject||(k=Math3D.magnitudeOfVector(k)*Math3D.magnitudeOfVector(c),0!=k&&(g=g.intensity*Math.max(h/k,0),e+=g))})}return{r:b.diffuseC.r*
e,g:b.diffuseC.g*e,b:b.diffuseC.b*e,a:255}};
Raytracer.prototype._specularShader=function(a){var b=a.lowestIntersectObject,d=a.lowestIntersectPoint,c=b.getNormalAt(d),e=0;if(this.getLightList()){var f=this;this.getLightList().map((g,h,k)=>{k=Math3D.vectorizePoints(d,g.source);h=Math3D.vectorizePoints(d,a.e);var l=Math3D.dotProduct(c,k),n=new Ray({e:d,d:k,exclusionObj:b});f.getObjectList().map((a)=>{a.rayIntersect(n)});if(!n.intersectedObject){var m=Math3D.magnitudeOfVector(c),l=l/(m*m)*2,m=Math3D.addVectors(Math3D.scalarMultiply(k,-1),Math3D.scalarMultiply(c,
l));k=b.specularFalloff;l=0;h=Math3D.dotProduct(h,m)/(Math3D.magnitudeOfVector(h)*Math3D.magnitudeOfVector(m));0<h&&(l=g.intensity*Math.max(Math.pow(h,k),0));e+=l}})}return{r:b.specularC.r*e,g:b.specularC.g*e,b:b.specularC.b*e,a:255}};
Raytracer.prototype._reflectionShader=function(a){var b=a.lowestIntersectObject,d=a.lowestIntersectPoint,c=b.getNormalAt(d),e=Math3D.dotProduct(Math3D.normalizeVector(a.d),Math3D.normalizeVector(c));return 0<b.reflectionFactor&&a.depth<this.recursionFactor&&0>e?(c=Math3D.scalarMultiply(c,-2*e),c=Math3D.normalizeVector(c),a=new Ray({e:d,d:c,depth:a.depth+1,exclusionObj:b}),a=this.raytrace(a),{r:a.r,g:a.g,b:a.b,a:255}):this.backgroundColor};
Raytracer.prototype._refractionShader=function(a,b){var d=a.lowestIntersectObject,c=d.getNormalAt(a.lowestIntersectPoint);Math3D.dotProduct(Math3D.normalizeVector(Math3D.scalarMultiply(a.d,1)),Math3D.normalizeVector(c));var e=d.refractionIndex,f={r:255,g:255,b:255,a:255};if(0<d.refractionIndex){var g=Math3D.crossProduct(c,a.d),f=Math3D.crossProduct(c,Math3D.crossProduct(Math3D.scalarMultiply(c,-1),a.d)),f=Math3D.scalarMultiply(f,e),g=Math3D.dotProduct(g,g),e=Math.sqrt(1-e*e*g),c=Math3D.scalarMultiply(c,
e),c=Math3D.normalizeVector(Math3D.vectorizePoints(f,c)),c=new Ray({e:a.e,d:c});d.rayIntersect(c);c.intersectedObject&&(c=new Ray({e:c.lowestIntersectPoint,d:a.d}));f=this.raytrace(c,b+1,d)}return{r:f.r,g:f.g,b:f.b,a:255}};var OmniLight=function(a){Light.call(this,a);if(a.source)this.source=a.source;else throw"Please define source in config for OmniLight";};$jscomp.inherits(OmniLight,Light);var Plane=function(a){GenericObject.call(this,a);a.restricted&&(this.restricted=a.restricted)};
$jscomp.inherits(Plane,GenericObject);Plane.prototype.rayIntersect=function(a){var b=a.d,d=Math3D.multiplyVectorByMatrix(this.transformInverse,a.e),c=Math3D.multiplyVectorByMatrix(this.transformInverse,b);if(0!=c.z&&(b=-(d.z/c.z),0>b))if(this.restricted){var e=d.x+c.x*b,d=d.y+c.y*b;1>=Math.sqrt(e*e+d*d)&&a.addIntersect({t:b,obj:this})}else a.addIntersect({t:b,obj:this})};Plane.prototype.getNormalAt=function(a){a={x:0,y:0,z:-1,h:1};return a=Math3D.multiplyVectorByMatrix(this.transform,a)};
Plane.prototype.getUVMapAt=(a)=>{r:0,g:0,b:0,a:0};var Sphere=function(a){GenericObject.call(this,a)};$jscomp.inherits(Sphere,GenericObject);
Sphere.prototype.rayIntersect=function(a){var b=a.d,d=Math3D.multiplyVectorByMatrix(this.transformInverse,a.e),c=Math3D.multiplyVectorByMatrix(this.transformInverse,b),e={x:d.x,y:d.y,z:d.z,h:0},b=Math3D.magnitudeOfVector(c),e=Math3D.magnitudeOfVector(e),b=b*b,d=Math3D.dotProduct(d,c),e=d*d-b*(e*e-1);0==e&&a.addIntersect(d/b,this);0<e&&(c=-d/b+Math.sqrt(e)/b,d=-d/b-Math.sqrt(e)/b,a.addIntersect({t:c,obj:this}),a.addIntersect({t:d,obj:this}))};
Sphere.prototype.getNormalAt=function(a){a=Math3D.multiplyVectorByMatrix(this.transformInverse,a);a={x:-a.x,y:-a.y,z:-a.z,h:0};a=Math3D.normalizeVector(a);return a=Math3D.multiplyVectorByMatrix(this.transform,a)};Sphere.prototype.getUVMapAt=(a)=>{r:0,g:0,b:0,a:0};
(()=>{window.canvas2D=new Canvas2D;$(window).on("load",()=>{for(var a=new Camera({position:{x:0,y:5,z:3,h:1},gaze:{x:0,y:0,z:0,h:1},width:canvas2D.width,height:canvas2D.height,viewingAngle:70,world:null,noPipe:!1}),b=new Sphere({baseC:{r:0,g:0,b:255,a:255},specularC:{r:255,g:255,b:255,a:255},transform:[[1,0,0,2],[0,1,0,0],[0,0,1,0],[0,0,0,1]]}),d=new Sphere({baseC:{r:0,g:0,b:255,a:255},specularC:{r:255,g:255,b:255,a:255},transform:[[1,0,0,0],[0,1,0,2],[0,0,1,0],[0,0,0,1]]}),c=new Sphere({baseC:{r:0,
g:0,b:255,a:255},specularC:{r:255,g:255,b:255,a:255},transform:[[1,0,0,-2],[0,1,0,0],[0,0,1,0],[0,0,0,1]]}),e=new Sphere({baseC:{r:0,g:0,b:255,a:255},specularC:{r:255,g:255,b:255,a:255},transform:[[1,0,0,0],[0,1,0,-2],[0,0,1,0],[0,0,0,1]]}),f=[],g=-1;1>=g;g+=1)for(var h=-1;1>=h;h+=1)for(var k=0;1>=k;k+=1){console.log("Making sphere at x:"+g+" y:"+h);var l=.35*(Math.random()+.5),n=g*(Math.random()/2+.75),m=h*(Math.random()/2+.75),q=k*(Math.random()/2+.75),l=[Math3D.translate(n,m,q),Math3D.scale(l,
l,l)],l=Math3D.transformPipe(l);console.log(l);f.push(new Sphere({baseC:{r:0,g:0,b:255,a:255},specularC:{r:255,g:255,b:255,a:255},transform:l}))}g=new Plane({baseC:{r:100,g:100,b:100,a:255},diffuseFactor:.8,specularFactor:1E-4,reflectionFactor:1E-4,transform:[[1,0,0,0],[0,1,0,0],[0,0,1,-1],[0,0,0,1]]});new Plane({baseC:{r:200,g:200,b:200,a:255},diffuseFactor:.8,specularFactor:1E-4,reflectionFactor:1E-4,transform:[[1,0,0,0],[0,1,0,0],[0,0,1,10],[0,0,0,1]]});h=new OmniLight({intensity:2,source:{x:0,
y:0,z:8,h:1}});f.push(a);f.push(b);f.push(d);f.push(c);f.push(e);f.push(g);f.push(h);var p=new Raytracer({world:f,pixelRenderer:window.canvas2D});console.log(p);setTimeout(()=>p.render(),2E3);$(window).on("resize",()=>{p.render()})})})();
